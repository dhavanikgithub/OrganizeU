---
I am developing an app for Android that displays timetables in both light and dark settings. The project is titled 'OrganizeU.' Let's discuss the functions of my project. First, it provides two user modules: one for Admin and one for students. The Admin module is singular, while the student module can accommodate multiple users.
---
---
What is the reason for this project?

I chose this project because at my college, I noticed that the timetable sheet is regularly uploaded to the website in PDF format each semester. However, problems occur when there are changes to the timetable without students being notified, except through messages in separate WhatsApp groups for each semester. This setup poses challenges. Another issue I encountered in college was the struggle to locate free classrooms either by checking the timetable or physically visiting them to verify availability. Moreover, faculty often face distractions during lessons because students' mobile devices are frequently not on silent mode, causing disruptions.

My application or project addresses all of these issues.
---

---

**Admin Accessibility in this Application**

1. Authentication (Login)

2. Manipulating Academic:
-> In academia, the academic year `2023-2024` consists of two semester types: `EVEN` and `ODD`. Under the `EVEN` system, semesters `1, 3, 5, 7` are active, whereas in the `ODD` system, semesters `2, 4, 6, 8` are active.
-> Both the `EVEN` and `ODD` semesters each last for 6 months, which adds up to a total of 12 months.
-> The semester switches from `EVEN` to `ODD` or vice versa every 6 months.
-> The administrator has the ability to include, modify, or remove various academic years with `EVEN` or `ODD` semester designations.
-> At any given moment, the administrator can only add or update a single academic year.
-> Multiple academics can be deleted by the administrator in one action.

3. Manipulating Semester:
-> There are a total of 8 academic terms.
-> Each academic year is divided into semesters such as '2023-2024_EVEN' or '2023-2024_ODD'.
-> If the academic year is `EVEN`, only `EVEN` semesters can be added (for example, `2023-2024_EVEN` includes semesters `2, 4, 6, 8`).
-> For `ODD` academic years, only `ODD` semesters can be included, such as `2023-2024_ODD` where semesters `1, 3, 5, 7` are involved.
-> The administrator is able to include, modify, or remove various academic terms.
-> The administrator has the ability to add or modify one semester individually, but can remove multiple semesters simultaneously.

4. Manipulating Class or Group:
-> A group of students is represented by a class in a semester.
-> A semester includes multiple classes.
-> A list of classes is had by every semester.
-> Multiple classes can be added, updated, or deleted by the Admin.
-> Only one class can be added or updated at a time by the admin, but multiple classes can be deleted at once.
-> Its own timetable sheet is had by each class.

5. Manipulating Batch or LAB:
-> A batch refers to a group of students within a class.
-> Each class possesses its individual sets of batches.
-> Batches are separated for hands-on sessions, since certain subjects necessitate practical demonstrations in college laboratories.
-> The administrator has the ability to add, modify, or remove several batches.
-> Admins have the ability to add or update a single batch at a time, although they can delete multiple batches simultaneously.

6. Manipulating Faculty:
-> The administrator has the ability to input, modify, or remove various faculty information.
-> Administrators have the ability to add or update one faculty record at a time, but they can delete multiple faculty records simultaneously.
-> Faculty information is essential for developing lessons.

7. Manipulating Room:
-> Students can sit and attend lessons in a classroom.
-> Classrooms and labs are included in the rooms.
-> Students attend lessons for specific subjects in classrooms, and they use labs for practical sessions.
-> Practicals in labs have computer systems.
-> Admin can add, update, or delete multiple classroom or lab data.
-> The admin can add or update only one classroom or lab data at a time, but can delete multiple classroom or lab data at once.
-> Creating lessons requires room data.

8. Manipulating Subject:
-> Multiple subject data can be added, updated, or deleted by the admin.
-> Only one subject data can be added or updated by the admin at a time, but multiple subject data can be deleted at once.
-> Lessons are created with the necessity of subject data.

9. Manipulating Timetable Sheet:
-> Each class possesses a unique schedule sheet.
-> The schedule document includes information about classes scheduled for every day of the week.
-> Each weekday could consist of several lessons for students.
-> Lessons may consist of either lecture sessions or laboratory practical sessions.
-> Admin has the ability to include, modify, or remove various lesson information in accordance with the schedule for each day of the week.
-> The administrator is able to add or update a single lesson's data at once and can delete multiple lesson data simultaneously.

--- 
---
Student Accessibility in this Application:

1. Students have the option to access the schedule for each day of the week.
2. Students have the option to verify the classrooms that are open for their additional study time.
3. Students have the option to utilize either the dark or light mode of the application.
4. Students are informed about upcoming lessons through notifications.
5. When the lesson begins, students' devices are muted automatically and unmuted when the lesson concludes.
6. Students are informed about any updates or modifications to their timetable sheet.
7. Students can filter lessons.
---

---
Database Structure in Firebase

Collection: academic
    Document: year+type [even or odd]
        Field: year {number}
        Field: type {string}
        Collection: semester
            Document: sem_number
                Collection: class
                    Document: class_name
                        Field: batches {list}
                Collection: time_table
                    Document: semester_number
                        Collection: class
                            Document: weekday_name
                                Collection: lesson
                                    Document: lesson_number
                                        Field: type {String}
                                        Field: batch_name {String} [May be NUll]
                                        Field: subject {String}
                                        Field: faculty {String}
                                        Field: room_name {String}
                                        Field: room_location {String}
                                        Field: start_time {Time}
                                        Field: end_time {Time}
					Field: notification_code {Int}
					Field: mute_code {Int}
					Field: unmute_code {Int}


Collection: faculty
    Document: faculty_name
        Field: name {string}

Collection: student
    Document: enrollment
        Field: name {String}
        Field: semester {number}
        Field: active {String}


Collection: room
    Document: room_name
        Field: location {String}
        Field: type {String}

---

Library which are i am using in my project.

1. AppCompact: Provide view components compatible with older and newer android devices.
implementation 'androidx.appcompat:appcompat:1.6.1'

2. Material Design: Provide attractive ui view components for attractive design.
implementation 'com.google.android.material:material:1.11.0'


3. Constraint Layout: Provide powerfull compatibility with attributes to easy create complex design ui.
implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

4. Kotlin Coroutines: Powerfull library for performing background task with capability of manage small process thread inside thread.
implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4"
implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4"

5. Kotlin Components: 
1.LiveData: Use for observer variable. Observe only when variable in active state. Help to make code relible, maintainable and readable.
2.ViewModel: It's lifecycle aware component to store data even if application configration change till the Activity or Fragment destroy.
implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.6.1'
implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.1'

6. Navigation Component: help to automate and manage fragment navigation easly
implementation "androidx.navigation:navigation-fragment-ktx:2.5.3"
implementation "androidx.navigation:navigation-ui-ktx:2.5.3"


7. SDP: Help to create respomsive UI
implementation 'com.intuit.sdp:sdp-android:1.1.0'

8. Firebase: Used for uses firebase service like Firebase Authentication for user authentication with different login providers, Firebase Firestore for storing data in collections and documents format. Firebase storage for store documents or files.

implementation 'com.google.firebase:firebase-firestore:24.11.0'
implementation 'com.google.firebase:firebase-database:20.3.1'
implementation 'com.google.firebase:firebase-storage:20.3.0'
implementation 'com.google.firebase:firebase-auth:22.3.1'

9. Swipe Refresh: For implement Functionality of swipe and refresh content of the screen
implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'

10. Range Time Picker: Used for pick start [Initial time|Begning time] and end time range.
implementation 'com.github.ashiqursuperfly:Android-Material-Ranged-Time-Picker-Dialog:1.0.2'

11. Dexter: Provide easy way to handle android application runtime permissions
implementation 'com.karumi:dexter:6.2.3'

in feature many include some other library as per project need
like `dagger & hilt`, `room database`, `prefrense datstore`, `lottie animation` or also many be implement data binding feature in aplication code.

Project minimum requirement to run.
1. Android 7 or up
2. minimum android sdk 24 require
3. Internet connection

Permission that are required in this application
1. Internet
2. notification
3. alarm
4. do not disturb

----------------------------------------------------------------------------------------------
Introducing OrganizeU - The scheduling solution for the IT Department at our college

In the fast-paced world of academic administration, accuracy and effectiveness are crucial, especially in our college's IT department. Meet OrganizeU, a custom Android app designed specifically for our college's IT department. With a strong emphasis on solving the issues encountered by IT staff and students, OrganizeU aims to transform how our department handles schedules, classes, and assets.

Customized for the IT administrators at our college:
OrganizeU offers a complete set of specialized tools to streamline administrative tasks in our college's IT department. These tools help manage academic years, semesters, classes, batches, faculty, rooms, subjects, and timetables efficiently. OrganizeU provides IT administrators with the necessary tools to ensure smooth academic operations, with its user-friendly interface and strong features making complex administrative tasks easier. This enables IT administrators to focus on creating a positive learning environment.

Supporting the IT students at our college:
OrganizeU is a valuable tool for students in our college's IT department, offering easy access to daily timetables, customizable dark and light modes, and timely notifications for schedule changes and upcoming classes. Additionally, the app includes a feature that automatically mutes devices during lessons to reduce distractions and create a conducive learning environment for academic success.

Supported by advanced technology:
Utilizing Firebase and various advanced libraries such as AppCompat, Material Design, Kotlin Coroutines, and Navigation Component, OrganizeU represents cutting-edge technological advancement. Firebase offers cloud-based storage and authentication services for efficient data management and user verification. The user experience is further improved with a responsive UI and simplified navigation on different Android devices. OrganizeU enables our college's IT department to adapt to the future of academic management effortlessly and confidently.

Conclusion:
Our college's IT department benefits greatly from OrganizeU, a powerful ally in achieving academic excellence. This tool seamlessly combines precision, efficiency, and innovation to revolutionize how our department handles timetables, classes, and resources. Say farewell to scheduling issues and welcome the ease and effectiveness of OrganizeU - an essential tool for successful organization within our college's IT department.
--------------------------------------------------------------------
